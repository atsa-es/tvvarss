// Generated by rstantools.  Do not edit by hand.

/*
    atsarpackage is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    atsarpackage is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with atsarpackage.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_tvvarss_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_tvvarss");
    reader.add_event(157, 155, "end", "model_tvvarss");
    return reader;
}
#include <stan_meta_header.hpp>
class model_tvvarss
  : public stan::model::model_base_crtp<model_tvvarss> {
private:
        int n_year;
        int n_site;
        int n_spp;
        int n_process;
        std::vector<int> process;
        std::vector<int> b_diag;
        matrix_d x0;
        std::vector<std::vector<int> > shared_q;
        int n_q;
        std::vector<std::vector<int> > shared_r;
        int n_r;
        std::vector<std::vector<int> > shared_u;
        int n_u;
        int est_trend;
        int demean;
        std::vector<int> row_indices;
        std::vector<int> col_indices;
        int n_pos;
        std::vector<int> spp_indices_pos;
        std::vector<int> site_indices_pos;
        std::vector<int> year_indices_pos;
        std::vector<double> y;
        std::vector<int> y_int;
        int family;
        std::vector<int> b_indices;
        matrix_d b_limits;
        int fit_dynamicB;
public:
    model_tvvarss(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_tvvarss(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_tvvarss_namespace::model_tvvarss";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n_year", "int", context__.to_vec());
            n_year = int(0);
            vals_i__ = context__.vals_i("n_year");
            pos__ = 0;
            n_year = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_year", n_year, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_site", "int", context__.to_vec());
            n_site = int(0);
            vals_i__ = context__.vals_i("n_site");
            pos__ = 0;
            n_site = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_site", n_site, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_spp", "int", context__.to_vec());
            n_spp = int(0);
            vals_i__ = context__.vals_i("n_spp");
            pos__ = 0;
            n_spp = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_spp", n_spp, 0);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "n_process", "int", context__.to_vec());
            n_process = int(0);
            vals_i__ = context__.vals_i("n_process");
            pos__ = 0;
            n_process = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_process", n_process, 0);
            current_statement_begin__ = 6;
            validate_non_negative_index("process", "(n_site + 1)", (n_site + 1));
            context__.validate_dims("data initialization", "process", "int", context__.to_vec((n_site + 1)));
            process = std::vector<int>((n_site + 1), int(0));
            vals_i__ = context__.vals_i("process");
            pos__ = 0;
            size_t process_k_0_max__ = (n_site + 1);
            for (size_t k_0__ = 0; k_0__ < process_k_0_max__; ++k_0__) {
                process[k_0__] = vals_i__[pos__++];
            }
            size_t process_i_0_max__ = (n_site + 1);
            for (size_t i_0__ = 0; i_0__ < process_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "process[i_0__]", process[i_0__], 0);
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("b_diag", "(n_spp * n_spp)", (n_spp * n_spp));
            context__.validate_dims("data initialization", "b_diag", "int", context__.to_vec((n_spp * n_spp)));
            b_diag = std::vector<int>((n_spp * n_spp), int(0));
            vals_i__ = context__.vals_i("b_diag");
            pos__ = 0;
            size_t b_diag_k_0_max__ = (n_spp * n_spp);
            for (size_t k_0__ = 0; k_0__ < b_diag_k_0_max__; ++k_0__) {
                b_diag[k_0__] = vals_i__[pos__++];
            }
            size_t b_diag_i_0_max__ = (n_spp * n_spp);
            for (size_t i_0__ = 0; i_0__ < b_diag_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "b_diag[i_0__]", b_diag[i_0__], 0);
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("x0", "n_process", n_process);
            validate_non_negative_index("x0", "n_spp", n_spp);
            context__.validate_dims("data initialization", "x0", "matrix_d", context__.to_vec(n_process,n_spp));
            x0 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_process, n_spp);
            vals_r__ = context__.vals_r("x0");
            pos__ = 0;
            size_t x0_j_2_max__ = n_spp;
            size_t x0_j_1_max__ = n_process;
            for (size_t j_2__ = 0; j_2__ < x0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x0_j_1_max__; ++j_1__) {
                    x0(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("shared_q", "n_spp", n_spp);
            validate_non_negative_index("shared_q", "(n_process + 1)", (n_process + 1));
            context__.validate_dims("data initialization", "shared_q", "int", context__.to_vec(n_spp,(n_process + 1)));
            shared_q = std::vector<std::vector<int> >(n_spp, std::vector<int>((n_process + 1), int(0)));
            vals_i__ = context__.vals_i("shared_q");
            pos__ = 0;
            size_t shared_q_k_0_max__ = n_spp;
            size_t shared_q_k_1_max__ = (n_process + 1);
            for (size_t k_1__ = 0; k_1__ < shared_q_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < shared_q_k_0_max__; ++k_0__) {
                    shared_q[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t shared_q_i_0_max__ = n_spp;
            size_t shared_q_i_1_max__ = (n_process + 1);
            for (size_t i_0__ = 0; i_0__ < shared_q_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < shared_q_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "shared_q[i_0__][i_1__]", shared_q[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "n_q", "int", context__.to_vec());
            n_q = int(0);
            vals_i__ = context__.vals_i("n_q");
            pos__ = 0;
            n_q = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_q", n_q, 0);
            current_statement_begin__ = 11;
            validate_non_negative_index("shared_r", "n_spp", n_spp);
            validate_non_negative_index("shared_r", "(n_site + 1)", (n_site + 1));
            context__.validate_dims("data initialization", "shared_r", "int", context__.to_vec(n_spp,(n_site + 1)));
            shared_r = std::vector<std::vector<int> >(n_spp, std::vector<int>((n_site + 1), int(0)));
            vals_i__ = context__.vals_i("shared_r");
            pos__ = 0;
            size_t shared_r_k_0_max__ = n_spp;
            size_t shared_r_k_1_max__ = (n_site + 1);
            for (size_t k_1__ = 0; k_1__ < shared_r_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < shared_r_k_0_max__; ++k_0__) {
                    shared_r[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t shared_r_i_0_max__ = n_spp;
            size_t shared_r_i_1_max__ = (n_site + 1);
            for (size_t i_0__ = 0; i_0__ < shared_r_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < shared_r_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "shared_r[i_0__][i_1__]", shared_r[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "n_r", "int", context__.to_vec());
            n_r = int(0);
            vals_i__ = context__.vals_i("n_r");
            pos__ = 0;
            n_r = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_r", n_r, 0);
            current_statement_begin__ = 13;
            validate_non_negative_index("shared_u", "n_spp", n_spp);
            validate_non_negative_index("shared_u", "(n_process + 1)", (n_process + 1));
            context__.validate_dims("data initialization", "shared_u", "int", context__.to_vec(n_spp,(n_process + 1)));
            shared_u = std::vector<std::vector<int> >(n_spp, std::vector<int>((n_process + 1), int(0)));
            vals_i__ = context__.vals_i("shared_u");
            pos__ = 0;
            size_t shared_u_k_0_max__ = n_spp;
            size_t shared_u_k_1_max__ = (n_process + 1);
            for (size_t k_1__ = 0; k_1__ < shared_u_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < shared_u_k_0_max__; ++k_0__) {
                    shared_u[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t shared_u_i_0_max__ = n_spp;
            size_t shared_u_i_1_max__ = (n_process + 1);
            for (size_t i_0__ = 0; i_0__ < shared_u_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < shared_u_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "shared_u[i_0__][i_1__]", shared_u[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "n_u", "int", context__.to_vec());
            n_u = int(0);
            vals_i__ = context__.vals_i("n_u");
            pos__ = 0;
            n_u = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_u", n_u, 0);
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "est_trend", "int", context__.to_vec());
            est_trend = int(0);
            vals_i__ = context__.vals_i("est_trend");
            pos__ = 0;
            est_trend = vals_i__[pos__++];
            check_greater_or_equal(function__, "est_trend", est_trend, 0);
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "demean", "int", context__.to_vec());
            demean = int(0);
            vals_i__ = context__.vals_i("demean");
            pos__ = 0;
            demean = vals_i__[pos__++];
            check_greater_or_equal(function__, "demean", demean, 0);
            current_statement_begin__ = 17;
            validate_non_negative_index("row_indices", "(n_spp * n_spp)", (n_spp * n_spp));
            context__.validate_dims("data initialization", "row_indices", "int", context__.to_vec((n_spp * n_spp)));
            row_indices = std::vector<int>((n_spp * n_spp), int(0));
            vals_i__ = context__.vals_i("row_indices");
            pos__ = 0;
            size_t row_indices_k_0_max__ = (n_spp * n_spp);
            for (size_t k_0__ = 0; k_0__ < row_indices_k_0_max__; ++k_0__) {
                row_indices[k_0__] = vals_i__[pos__++];
            }
            size_t row_indices_i_0_max__ = (n_spp * n_spp);
            for (size_t i_0__ = 0; i_0__ < row_indices_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "row_indices[i_0__]", row_indices[i_0__], 0);
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("col_indices", "(n_spp * n_spp)", (n_spp * n_spp));
            context__.validate_dims("data initialization", "col_indices", "int", context__.to_vec((n_spp * n_spp)));
            col_indices = std::vector<int>((n_spp * n_spp), int(0));
            vals_i__ = context__.vals_i("col_indices");
            pos__ = 0;
            size_t col_indices_k_0_max__ = (n_spp * n_spp);
            for (size_t k_0__ = 0; k_0__ < col_indices_k_0_max__; ++k_0__) {
                col_indices[k_0__] = vals_i__[pos__++];
            }
            size_t col_indices_i_0_max__ = (n_spp * n_spp);
            for (size_t i_0__ = 0; i_0__ < col_indices_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "col_indices[i_0__]", col_indices[i_0__], 0);
            }
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "n_pos", "int", context__.to_vec());
            n_pos = int(0);
            vals_i__ = context__.vals_i("n_pos");
            pos__ = 0;
            n_pos = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_pos", n_pos, 0);
            current_statement_begin__ = 20;
            validate_non_negative_index("spp_indices_pos", "n_pos", n_pos);
            context__.validate_dims("data initialization", "spp_indices_pos", "int", context__.to_vec(n_pos));
            spp_indices_pos = std::vector<int>(n_pos, int(0));
            vals_i__ = context__.vals_i("spp_indices_pos");
            pos__ = 0;
            size_t spp_indices_pos_k_0_max__ = n_pos;
            for (size_t k_0__ = 0; k_0__ < spp_indices_pos_k_0_max__; ++k_0__) {
                spp_indices_pos[k_0__] = vals_i__[pos__++];
            }
            size_t spp_indices_pos_i_0_max__ = n_pos;
            for (size_t i_0__ = 0; i_0__ < spp_indices_pos_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "spp_indices_pos[i_0__]", spp_indices_pos[i_0__], 0);
            }
            current_statement_begin__ = 21;
            validate_non_negative_index("site_indices_pos", "n_pos", n_pos);
            context__.validate_dims("data initialization", "site_indices_pos", "int", context__.to_vec(n_pos));
            site_indices_pos = std::vector<int>(n_pos, int(0));
            vals_i__ = context__.vals_i("site_indices_pos");
            pos__ = 0;
            size_t site_indices_pos_k_0_max__ = n_pos;
            for (size_t k_0__ = 0; k_0__ < site_indices_pos_k_0_max__; ++k_0__) {
                site_indices_pos[k_0__] = vals_i__[pos__++];
            }
            size_t site_indices_pos_i_0_max__ = n_pos;
            for (size_t i_0__ = 0; i_0__ < site_indices_pos_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "site_indices_pos[i_0__]", site_indices_pos[i_0__], 0);
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("year_indices_pos", "n_pos", n_pos);
            context__.validate_dims("data initialization", "year_indices_pos", "int", context__.to_vec(n_pos));
            year_indices_pos = std::vector<int>(n_pos, int(0));
            vals_i__ = context__.vals_i("year_indices_pos");
            pos__ = 0;
            size_t year_indices_pos_k_0_max__ = n_pos;
            for (size_t k_0__ = 0; k_0__ < year_indices_pos_k_0_max__; ++k_0__) {
                year_indices_pos[k_0__] = vals_i__[pos__++];
            }
            size_t year_indices_pos_i_0_max__ = n_pos;
            for (size_t i_0__ = 0; i_0__ < year_indices_pos_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "year_indices_pos[i_0__]", year_indices_pos[i_0__], 0);
            }
            current_statement_begin__ = 23;
            validate_non_negative_index("y", "n_pos", n_pos);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(n_pos));
            y = std::vector<double>(n_pos, double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_k_0_max__ = n_pos;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 24;
            validate_non_negative_index("y_int", "n_pos", n_pos);
            context__.validate_dims("data initialization", "y_int", "int", context__.to_vec(n_pos));
            y_int = std::vector<int>(n_pos, int(0));
            vals_i__ = context__.vals_i("y_int");
            pos__ = 0;
            size_t y_int_k_0_max__ = n_pos;
            for (size_t k_0__ = 0; k_0__ < y_int_k_0_max__; ++k_0__) {
                y_int[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "family", "int", context__.to_vec());
            family = int(0);
            vals_i__ = context__.vals_i("family");
            pos__ = 0;
            family = vals_i__[pos__++];
            current_statement_begin__ = 26;
            validate_non_negative_index("b_indices", "(n_spp * n_spp)", (n_spp * n_spp));
            context__.validate_dims("data initialization", "b_indices", "int", context__.to_vec((n_spp * n_spp)));
            b_indices = std::vector<int>((n_spp * n_spp), int(0));
            vals_i__ = context__.vals_i("b_indices");
            pos__ = 0;
            size_t b_indices_k_0_max__ = (n_spp * n_spp);
            for (size_t k_0__ = 0; k_0__ < b_indices_k_0_max__; ++k_0__) {
                b_indices[k_0__] = vals_i__[pos__++];
            }
            size_t b_indices_i_0_max__ = (n_spp * n_spp);
            for (size_t i_0__ = 0; i_0__ < b_indices_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "b_indices[i_0__]", b_indices[i_0__], 0);
            }
            current_statement_begin__ = 27;
            validate_non_negative_index("b_limits", "4", 4);
            validate_non_negative_index("b_limits", "2", 2);
            context__.validate_dims("data initialization", "b_limits", "matrix_d", context__.to_vec(4,2));
            b_limits = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(4, 2);
            vals_r__ = context__.vals_r("b_limits");
            pos__ = 0;
            size_t b_limits_j_2_max__ = 2;
            size_t b_limits_j_1_max__ = 4;
            for (size_t j_2__ = 0; j_2__ < b_limits_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < b_limits_j_1_max__; ++j_1__) {
                    b_limits(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "fit_dynamicB", "int", context__.to_vec());
            fit_dynamicB = int(0);
            vals_i__ = context__.vals_i("fit_dynamicB");
            pos__ = 0;
            fit_dynamicB = vals_i__[pos__++];
            check_greater_or_equal(function__, "fit_dynamicB", fit_dynamicB, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 31;
            validate_non_negative_index("vecBdev", "(n_spp * n_spp)", (n_spp * n_spp));
            validate_non_negative_index("vecBdev", "n_year", n_year);
            num_params_r__ += ((n_spp * n_spp) * n_year);
            current_statement_begin__ = 32;
            validate_non_negative_index("sigma_rw_pars", "2", 2);
            num_params_r__ += (1 * 2);
            current_statement_begin__ = 33;
            validate_non_negative_index("x", "n_year", n_year);
            validate_non_negative_index("x", "n_spp", n_spp);
            validate_non_negative_index("x", "n_process", n_process);
            num_params_r__ += ((n_year * n_spp) * n_process);
            current_statement_begin__ = 34;
            validate_non_negative_index("resid_process_sd", "n_q", n_q);
            num_params_r__ += (1 * n_q);
            current_statement_begin__ = 35;
            validate_non_negative_index("obs_sd", "n_r", n_r);
            num_params_r__ += (1 * n_r);
            current_statement_begin__ = 36;
            validate_non_negative_index("u", "n_u", n_u);
            num_params_r__ += (1 * n_u);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_tvvarss() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 31;
        if (!(context__.contains_r("vecBdev")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable vecBdev missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("vecBdev");
        pos__ = 0U;
        validate_non_negative_index("vecBdev", "(n_spp * n_spp)", (n_spp * n_spp));
        validate_non_negative_index("vecBdev", "n_year", n_year);
        context__.validate_dims("parameter initialization", "vecBdev", "vector_d", context__.to_vec(n_year,(n_spp * n_spp)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > vecBdev(n_year, Eigen::Matrix<double, Eigen::Dynamic, 1>((n_spp * n_spp)));
        size_t vecBdev_j_1_max__ = (n_spp * n_spp);
        size_t vecBdev_k_0_max__ = n_year;
        for (size_t j_1__ = 0; j_1__ < vecBdev_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < vecBdev_k_0_max__; ++k_0__) {
                vecBdev[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t vecBdev_i_0_max__ = n_year;
        for (size_t i_0__ = 0; i_0__ < vecBdev_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lub_unconstrain(0, 1, vecBdev[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable vecBdev: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("sigma_rw_pars")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_rw_pars missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_rw_pars");
        pos__ = 0U;
        validate_non_negative_index("sigma_rw_pars", "2", 2);
        context__.validate_dims("parameter initialization", "sigma_rw_pars", "double", context__.to_vec(2));
        std::vector<double> sigma_rw_pars(2, double(0));
        size_t sigma_rw_pars_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < sigma_rw_pars_k_0_max__; ++k_0__) {
            sigma_rw_pars[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_rw_pars_i_0_max__ = 2;
        for (size_t i_0__ = 0; i_0__ < sigma_rw_pars_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma_rw_pars[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_rw_pars: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("x")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable x missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("x");
        pos__ = 0U;
        validate_non_negative_index("x", "n_year", n_year);
        validate_non_negative_index("x", "n_spp", n_spp);
        validate_non_negative_index("x", "n_process", n_process);
        context__.validate_dims("parameter initialization", "x", "matrix_d", context__.to_vec(n_process,n_year,n_spp));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > x(n_process, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_year, n_spp));
        size_t x_j_2_max__ = n_spp;
        size_t x_j_1_max__ = n_year;
        size_t x_k_0_max__ = n_process;
        for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                    x[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                }
            }
        }
        size_t x_i_0_max__ = n_process;
        for (size_t i_0__ = 0; i_0__ < x_i_0_max__; ++i_0__) {
            try {
                writer__.matrix_unconstrain(x[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable x: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 34;
        if (!(context__.contains_r("resid_process_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable resid_process_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("resid_process_sd");
        pos__ = 0U;
        validate_non_negative_index("resid_process_sd", "n_q", n_q);
        context__.validate_dims("parameter initialization", "resid_process_sd", "double", context__.to_vec(n_q));
        std::vector<double> resid_process_sd(n_q, double(0));
        size_t resid_process_sd_k_0_max__ = n_q;
        for (size_t k_0__ = 0; k_0__ < resid_process_sd_k_0_max__; ++k_0__) {
            resid_process_sd[k_0__] = vals_r__[pos__++];
        }
        size_t resid_process_sd_i_0_max__ = n_q;
        for (size_t i_0__ = 0; i_0__ < resid_process_sd_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, resid_process_sd[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable resid_process_sd: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("obs_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable obs_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("obs_sd");
        pos__ = 0U;
        validate_non_negative_index("obs_sd", "n_r", n_r);
        context__.validate_dims("parameter initialization", "obs_sd", "double", context__.to_vec(n_r));
        std::vector<double> obs_sd(n_r, double(0));
        size_t obs_sd_k_0_max__ = n_r;
        for (size_t k_0__ = 0; k_0__ < obs_sd_k_0_max__; ++k_0__) {
            obs_sd[k_0__] = vals_r__[pos__++];
        }
        size_t obs_sd_i_0_max__ = n_r;
        for (size_t i_0__ = 0; i_0__ < obs_sd_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, obs_sd[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable obs_sd: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("u")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable u missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("u");
        pos__ = 0U;
        validate_non_negative_index("u", "n_u", n_u);
        context__.validate_dims("parameter initialization", "u", "double", context__.to_vec(n_u));
        std::vector<double> u(n_u, double(0));
        size_t u_k_0_max__ = n_u;
        for (size_t k_0__ = 0; k_0__ < u_k_0_max__; ++k_0__) {
            u[k_0__] = vals_r__[pos__++];
        }
        size_t u_i_0_max__ = n_u;
        for (size_t i_0__ = 0; i_0__ < u_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(u[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable u: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 31;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > vecBdev;
            size_t vecBdev_d_0_max__ = n_year;
            vecBdev.reserve(vecBdev_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < vecBdev_d_0_max__; ++d_0__) {
                if (jacobian__)
                    vecBdev.push_back(in__.vector_lub_constrain(0, 1, (n_spp * n_spp), lp__));
                else
                    vecBdev.push_back(in__.vector_lub_constrain(0, 1, (n_spp * n_spp)));
            }
            current_statement_begin__ = 32;
            std::vector<local_scalar_t__> sigma_rw_pars;
            size_t sigma_rw_pars_d_0_max__ = 2;
            sigma_rw_pars.reserve(sigma_rw_pars_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_rw_pars_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma_rw_pars.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma_rw_pars.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 33;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > x;
            size_t x_d_0_max__ = n_process;
            x.reserve(x_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < x_d_0_max__; ++d_0__) {
                if (jacobian__)
                    x.push_back(in__.matrix_constrain(n_year, n_spp, lp__));
                else
                    x.push_back(in__.matrix_constrain(n_year, n_spp));
            }
            current_statement_begin__ = 34;
            std::vector<local_scalar_t__> resid_process_sd;
            size_t resid_process_sd_d_0_max__ = n_q;
            resid_process_sd.reserve(resid_process_sd_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < resid_process_sd_d_0_max__; ++d_0__) {
                if (jacobian__)
                    resid_process_sd.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    resid_process_sd.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 35;
            std::vector<local_scalar_t__> obs_sd;
            size_t obs_sd_d_0_max__ = n_r;
            obs_sd.reserve(obs_sd_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < obs_sd_d_0_max__; ++d_0__) {
                if (jacobian__)
                    obs_sd.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    obs_sd.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 36;
            std::vector<local_scalar_t__> u;
            size_t u_d_0_max__ = n_u;
            u.reserve(u_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < u_d_0_max__; ++d_0__) {
                if (jacobian__)
                    u.push_back(in__.scalar_constrain(lp__));
                else
                    u.push_back(in__.scalar_constrain());
            }
            // transformed parameters
            current_statement_begin__ = 39;
            validate_non_negative_index("sigma_rw", "(n_spp * n_spp)", (n_spp * n_spp));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_rw((n_spp * n_spp));
            stan::math::initialize(sigma_rw, DUMMY_VAR__);
            stan::math::fill(sigma_rw, DUMMY_VAR__);
            current_statement_begin__ = 40;
            validate_non_negative_index("resid_process_mat", "n_spp", n_spp);
            validate_non_negative_index("resid_process_mat", "n_process", n_process);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> resid_process_mat(n_spp, n_process);
            stan::math::initialize(resid_process_mat, DUMMY_VAR__);
            stan::math::fill(resid_process_mat, DUMMY_VAR__);
            current_statement_begin__ = 41;
            validate_non_negative_index("obs_mat", "n_spp", n_spp);
            validate_non_negative_index("obs_mat", "n_site", n_site);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> obs_mat(n_spp, n_site);
            stan::math::initialize(obs_mat, DUMMY_VAR__);
            stan::math::fill(obs_mat, DUMMY_VAR__);
            current_statement_begin__ = 42;
            validate_non_negative_index("vecB", "(n_spp * n_spp)", (n_spp * n_spp));
            validate_non_negative_index("vecB", "n_year", n_year);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > vecB(n_year, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((n_spp * n_spp)));
            stan::math::initialize(vecB, DUMMY_VAR__);
            stan::math::fill(vecB, DUMMY_VAR__);
            current_statement_begin__ = 43;
            validate_non_negative_index("u_mat", "n_spp", n_spp);
            validate_non_negative_index("u_mat", "n_process", n_process);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> u_mat(n_spp, n_process);
            stan::math::initialize(u_mat, DUMMY_VAR__);
            stan::math::fill(u_mat, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("B", "n_spp", n_spp);
            validate_non_negative_index("B", "n_spp", n_spp);
            validate_non_negative_index("B", "(n_year - 1)", (n_year - 1));
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > B((n_year - 1), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n_spp, n_spp));
            stan::math::initialize(B, DUMMY_VAR__);
            stan::math::fill(B, DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("pred", "n_year", n_year);
            validate_non_negative_index("pred", "n_spp", n_spp);
            validate_non_negative_index("pred", "n_process", n_process);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > pred(n_process, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n_year, n_spp));
            stan::math::initialize(pred, DUMMY_VAR__);
            stan::math::fill(pred, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 47;
            for (int i = 1; i <= (n_spp * n_spp); ++i) {
                current_statement_begin__ = 48;
                stan::model::assign(sigma_rw, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(sigma_rw_pars, get_base1(b_diag, i, "b_diag", 1), "sigma_rw_pars", 1), 
                            "assigning variable sigma_rw");
            }
            current_statement_begin__ = 50;
            for (int i = 1; i <= n_spp; ++i) {
                current_statement_begin__ = 51;
                for (int j = 1; j <= n_process; ++j) {
                    current_statement_begin__ = 52;
                    stan::model::assign(resid_process_mat, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(resid_process_sd, get_base1(get_base1(shared_q, i, "shared_q", 1), j, "shared_q", 2), "resid_process_sd", 1), 
                                "assigning variable resid_process_mat");
                    current_statement_begin__ = 53;
                    stan::model::assign(u_mat, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(u, get_base1(get_base1(shared_u, i, "shared_u", 1), j, "shared_u", 2), "u", 1), 
                                "assigning variable u_mat");
                }
                current_statement_begin__ = 55;
                for (int j = 1; j <= n_site; ++j) {
                    current_statement_begin__ = 56;
                    stan::model::assign(obs_mat, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(obs_sd, get_base1(get_base1(shared_r, i, "shared_r", 1), j, "shared_r", 2), "obs_sd", 1), 
                                "assigning variable obs_mat");
                }
            }
            current_statement_begin__ = 60;
            for (int s = 1; s <= n_process; ++s) {
                current_statement_begin__ = 61;
                stan::model::assign(pred, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), 
                            stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "x"), 
                            "assigning variable pred");
            }
            current_statement_begin__ = 63;
            for (int i = 1; i <= (n_spp * n_spp); ++i) {
                current_statement_begin__ = 64;
                stan::model::assign(vecB, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            get_base1(get_base1(vecBdev, 1, "vecBdev", 1), i, "vecBdev", 2), 
                            "assigning variable vecB");
            }
            current_statement_begin__ = 66;
            for (int t = 2; t <= n_year; ++t) {
                current_statement_begin__ = 70;
                for (int i = 1; i <= (n_spp * n_spp); ++i) {
                    current_statement_begin__ = 72;
                    stan::model::assign(B, 
                                stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_uni(get_base1(row_indices, i, "row_indices", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indices, i, "col_indices", 1)), stan::model::nil_index_list()))), 
                                (((get_base1(b_limits, get_base1(b_indices, i, "b_indices", 1), 2, "b_limits", 1) - get_base1(b_limits, get_base1(b_indices, i, "b_indices", 1), 1, "b_limits", 1)) * get_base1(get_base1(vecB, (t - 1), "vecB", 1), i, "vecB", 2)) + get_base1(b_limits, get_base1(b_indices, i, "b_indices", 1), 1, "b_limits", 1)), 
                                "assigning variable B");
                    current_statement_begin__ = 74;
                    stan::model::assign(vecB, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                (get_base1(get_base1(vecB, (t - 1), "vecB", 1), i, "vecB", 2) + (fit_dynamicB * get_base1(get_base1(vecBdev, (t - 1), "vecBdev", 1), i, "vecBdev", 2))), 
                                "assigning variable vecB");
                }
                current_statement_begin__ = 83;
                for (int s = 1; s <= n_process; ++s) {
                    current_statement_begin__ = 84;
                    if (as_bool(logical_eq(est_trend, 0))) {
                        current_statement_begin__ = 85;
                        if (as_bool(logical_eq(demean, 0))) {
                            current_statement_begin__ = 85;
                            stan::model::assign(pred, 
                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), 
                                        multiply(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "x"), stan::model::rvalue(B, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "B")), 
                                        "assigning variable pred");
                        }
                        current_statement_begin__ = 86;
                        if (as_bool(logical_eq(demean, 1))) {
                            current_statement_begin__ = 86;
                            stan::model::assign(pred, 
                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), 
                                        multiply(subtract(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "x"), transpose(stan::model::rvalue(u_mat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "u_mat"))), stan::model::rvalue(B, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "B")), 
                                        "assigning variable pred");
                        }
                    }
                    current_statement_begin__ = 88;
                    if (as_bool(logical_eq(est_trend, 1))) {
                        current_statement_begin__ = 89;
                        if (as_bool(logical_eq(demean, 0))) {
                            current_statement_begin__ = 89;
                            stan::model::assign(pred, 
                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), 
                                        add(multiply(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "x"), stan::model::rvalue(B, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "B")), transpose(stan::model::rvalue(u_mat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "u_mat"))), 
                                        "assigning variable pred");
                        }
                        current_statement_begin__ = 90;
                        if (as_bool(logical_eq(demean, 1))) {
                            current_statement_begin__ = 90;
                            stan::model::assign(pred, 
                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), 
                                        add(multiply(subtract(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "x"), transpose(stan::model::rvalue(u_mat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "u_mat"))), stan::model::rvalue(B, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "B")), transpose(stan::model::rvalue(u_mat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "u_mat"))), 
                                        "assigning variable pred");
                        }
                    }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 39;
            size_t sigma_rw_j_1_max__ = (n_spp * n_spp);
            for (size_t j_1__ = 0; j_1__ < sigma_rw_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sigma_rw(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma_rw" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma_rw: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "sigma_rw", sigma_rw, 0);
            current_statement_begin__ = 40;
            size_t resid_process_mat_j_1_max__ = n_spp;
            size_t resid_process_mat_j_2_max__ = n_process;
            for (size_t j_1__ = 0; j_1__ < resid_process_mat_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < resid_process_mat_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(resid_process_mat(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: resid_process_mat" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable resid_process_mat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "resid_process_mat", resid_process_mat, 0);
            current_statement_begin__ = 41;
            size_t obs_mat_j_1_max__ = n_spp;
            size_t obs_mat_j_2_max__ = n_site;
            for (size_t j_1__ = 0; j_1__ < obs_mat_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < obs_mat_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(obs_mat(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: obs_mat" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable obs_mat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "obs_mat", obs_mat, 0);
            current_statement_begin__ = 42;
            size_t vecB_k_0_max__ = n_year;
            size_t vecB_j_1_max__ = (n_spp * n_spp);
            for (size_t k_0__ = 0; k_0__ < vecB_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < vecB_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(vecB[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: vecB" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable vecB: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            size_t vecB_i_0_max__ = n_year;
            for (size_t i_0__ = 0; i_0__ < vecB_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "vecB[i_0__]", vecB[i_0__], -(20));
                check_less_or_equal(function__, "vecB[i_0__]", vecB[i_0__], 20);
            }
            current_statement_begin__ = 43;
            size_t u_mat_j_1_max__ = n_spp;
            size_t u_mat_j_2_max__ = n_process;
            for (size_t j_1__ = 0; j_1__ < u_mat_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < u_mat_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(u_mat(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: u_mat" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable u_mat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 44;
            size_t B_k_0_max__ = (n_year - 1);
            size_t B_j_1_max__ = n_spp;
            size_t B_j_2_max__ = n_spp;
            for (size_t k_0__ = 0; k_0__ < B_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                    for (size_t j_2__ = 0; j_2__ < B_j_2_max__; ++j_2__) {
                        if (stan::math::is_uninitialized(B[k_0__](j_1__, j_2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: B" << "[" << k_0__ << "]" << "(" << j_1__ << ", " << j_2__ << ")";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable B: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            current_statement_begin__ = 45;
            size_t pred_k_0_max__ = n_process;
            size_t pred_j_1_max__ = n_year;
            size_t pred_j_2_max__ = n_spp;
            for (size_t k_0__ = 0; k_0__ < pred_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                    for (size_t j_2__ = 0; j_2__ < pred_j_2_max__; ++j_2__) {
                        if (stan::math::is_uninitialized(pred[k_0__](j_1__, j_2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: pred" << "[" << k_0__ << "]" << "(" << j_1__ << ", " << j_2__ << ")";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            // model body
            current_statement_begin__ = 96;
            lp_accum__.add(student_t_log<propto__>(get_base1(sigma_rw_pars, 1, "sigma_rw_pars", 1), 5, 0, 1));
            current_statement_begin__ = 97;
            lp_accum__.add(student_t_log<propto__>(get_base1(sigma_rw_pars, 2, "sigma_rw_pars", 1), 5, 0, 1));
            current_statement_begin__ = 99;
            for (int t = 1; t <= n_year; ++t) {
                current_statement_begin__ = 101;
                lp_accum__.add(normal_log<propto__>(get_base1(vecBdev, t, "vecBdev", 1), 0, 10));
            }
            current_statement_begin__ = 104;
            for (int site = 1; site <= n_process; ++site) {
                current_statement_begin__ = 105;
                for (int spp = 1; spp <= n_spp; ++spp) {
                    current_statement_begin__ = 106;
                    lp_accum__.add(normal_log<propto__>(get_base1(get_base1(x, site, "x", 1), 1, spp, "x", 2), get_base1(x0, site, spp, "x0", 1), 1));
                }
            }
            current_statement_begin__ = 110;
            for (int t = 2; t <= n_year; ++t) {
                current_statement_begin__ = 111;
                for (int site = 1; site <= n_process; ++site) {
                    current_statement_begin__ = 112;
                    for (int spp = 1; spp <= n_spp; ++spp) {
                        current_statement_begin__ = 113;
                        lp_accum__.add(normal_log<propto__>(get_base1(get_base1(x, site, "x", 1), t, spp, "x", 2), get_base1(get_base1(pred, site, "pred", 1), t, spp, "pred", 2), get_base1(resid_process_mat, spp, site, "resid_process_mat", 1)));
                    }
                }
            }
            current_statement_begin__ = 118;
            for (int i = 1; i <= n_q; ++i) {
                current_statement_begin__ = 120;
                lp_accum__.add(student_t_log<propto__>(get_base1(resid_process_sd, i, "resid_process_sd", 1), 5, 0, 1));
            }
            current_statement_begin__ = 122;
            for (int i = 1; i <= n_r; ++i) {
                current_statement_begin__ = 123;
                lp_accum__.add(student_t_log<propto__>(get_base1(obs_sd, i, "obs_sd", 1), 5, 0, 1));
            }
            current_statement_begin__ = 125;
            for (int i = 1; i <= n_u; ++i) {
                current_statement_begin__ = 127;
                lp_accum__.add(normal_log<propto__>(get_base1(u, i, "u", 1), 0, 1));
            }
            current_statement_begin__ = 130;
            if (as_bool(logical_eq(family, 1))) {
                current_statement_begin__ = 131;
                for (int i = 1; i <= n_pos; ++i) {
                    current_statement_begin__ = 131;
                    lp_accum__.add(normal_log<propto__>(get_base1(y, i, "y", 1), get_base1(get_base1(x, get_base1(site_indices_pos, i, "site_indices_pos", 1), "x", 1), get_base1(year_indices_pos, i, "year_indices_pos", 1), get_base1(spp_indices_pos, i, "spp_indices_pos", 1), "x", 2), get_base1(obs_mat, get_base1(spp_indices_pos, i, "spp_indices_pos", 1), get_base1(site_indices_pos, i, "site_indices_pos", 1), "obs_mat", 1)));
                }
            }
            current_statement_begin__ = 133;
            if (as_bool(logical_eq(family, 2))) {
                current_statement_begin__ = 134;
                for (int i = 1; i <= n_pos; ++i) {
                    current_statement_begin__ = 134;
                    lp_accum__.add(bernoulli_logit_log<propto__>(get_base1(y_int, i, "y_int", 1), get_base1(get_base1(x, get_base1(site_indices_pos, i, "site_indices_pos", 1), "x", 1), get_base1(year_indices_pos, i, "year_indices_pos", 1), get_base1(spp_indices_pos, i, "spp_indices_pos", 1), "x", 2)));
                }
            }
            current_statement_begin__ = 136;
            if (as_bool(logical_eq(family, 3))) {
                current_statement_begin__ = 137;
                for (int i = 1; i <= n_pos; ++i) {
                    current_statement_begin__ = 137;
                    lp_accum__.add(poisson_log_log<propto__>(get_base1(y_int, i, "y_int", 1), get_base1(get_base1(x, get_base1(site_indices_pos, i, "site_indices_pos", 1), "x", 1), get_base1(year_indices_pos, i, "year_indices_pos", 1), get_base1(spp_indices_pos, i, "spp_indices_pos", 1), "x", 2)));
                }
            }
            current_statement_begin__ = 139;
            if (as_bool(logical_eq(family, 4))) {
                current_statement_begin__ = 140;
                for (int i = 1; i <= n_pos; ++i) {
                    current_statement_begin__ = 140;
                    lp_accum__.add(gamma_log<propto__>(get_base1(y, i, "y", 1), get_base1(obs_mat, get_base1(spp_indices_pos, i, "spp_indices_pos", 1), get_base1(site_indices_pos, i, "site_indices_pos", 1), "obs_mat", 1), (get_base1(obs_mat, get_base1(spp_indices_pos, i, "spp_indices_pos", 1), get_base1(site_indices_pos, i, "site_indices_pos", 1), "obs_mat", 1) / stan::math::exp(get_base1(get_base1(x, get_base1(site_indices_pos, i, "site_indices_pos", 1), "x", 1), get_base1(year_indices_pos, i, "year_indices_pos", 1), get_base1(spp_indices_pos, i, "spp_indices_pos", 1), "x", 2)))));
                }
            }
            current_statement_begin__ = 142;
            if (as_bool(logical_eq(family, 5))) {
                current_statement_begin__ = 143;
                for (int i = 1; i <= n_pos; ++i) {
                    current_statement_begin__ = 143;
                    lp_accum__.add(lognormal_log<propto__>(get_base1(y, i, "y", 1), get_base1(get_base1(x, get_base1(site_indices_pos, i, "site_indices_pos", 1), "x", 1), get_base1(year_indices_pos, i, "year_indices_pos", 1), get_base1(spp_indices_pos, i, "spp_indices_pos", 1), "x", 2), get_base1(obs_mat, get_base1(spp_indices_pos, i, "spp_indices_pos", 1), get_base1(site_indices_pos, i, "site_indices_pos", 1), "obs_mat", 1)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("vecBdev");
        names__.push_back("sigma_rw_pars");
        names__.push_back("x");
        names__.push_back("resid_process_sd");
        names__.push_back("obs_sd");
        names__.push_back("u");
        names__.push_back("sigma_rw");
        names__.push_back("resid_process_mat");
        names__.push_back("obs_mat");
        names__.push_back("vecB");
        names__.push_back("u_mat");
        names__.push_back("B");
        names__.push_back("pred");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_year);
        dims__.push_back((n_spp * n_spp));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_process);
        dims__.push_back(n_year);
        dims__.push_back(n_spp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_r);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_u);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_spp * n_spp));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_spp);
        dims__.push_back(n_process);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_spp);
        dims__.push_back(n_site);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_year);
        dims__.push_back((n_spp * n_spp));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_spp);
        dims__.push_back(n_process);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_year - 1));
        dims__.push_back(n_spp);
        dims__.push_back(n_spp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_process);
        dims__.push_back(n_year);
        dims__.push_back(n_spp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pos);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_tvvarss_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > vecBdev;
        size_t vecBdev_d_0_max__ = n_year;
        vecBdev.reserve(vecBdev_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < vecBdev_d_0_max__; ++d_0__) {
            vecBdev.push_back(in__.vector_lub_constrain(0, 1, (n_spp * n_spp)));
        }
        size_t vecBdev_j_1_max__ = (n_spp * n_spp);
        size_t vecBdev_k_0_max__ = n_year;
        for (size_t j_1__ = 0; j_1__ < vecBdev_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < vecBdev_k_0_max__; ++k_0__) {
                vars__.push_back(vecBdev[k_0__](j_1__));
            }
        }
        std::vector<double> sigma_rw_pars;
        size_t sigma_rw_pars_d_0_max__ = 2;
        sigma_rw_pars.reserve(sigma_rw_pars_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_rw_pars_d_0_max__; ++d_0__) {
            sigma_rw_pars.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_rw_pars_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < sigma_rw_pars_k_0_max__; ++k_0__) {
            vars__.push_back(sigma_rw_pars[k_0__]);
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > x;
        size_t x_d_0_max__ = n_process;
        x.reserve(x_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < x_d_0_max__; ++d_0__) {
            x.push_back(in__.matrix_constrain(n_year, n_spp));
        }
        size_t x_j_2_max__ = n_spp;
        size_t x_j_1_max__ = n_year;
        size_t x_k_0_max__ = n_process;
        for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                    vars__.push_back(x[k_0__](j_1__, j_2__));
                }
            }
        }
        std::vector<double> resid_process_sd;
        size_t resid_process_sd_d_0_max__ = n_q;
        resid_process_sd.reserve(resid_process_sd_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < resid_process_sd_d_0_max__; ++d_0__) {
            resid_process_sd.push_back(in__.scalar_lb_constrain(0));
        }
        size_t resid_process_sd_k_0_max__ = n_q;
        for (size_t k_0__ = 0; k_0__ < resid_process_sd_k_0_max__; ++k_0__) {
            vars__.push_back(resid_process_sd[k_0__]);
        }
        std::vector<double> obs_sd;
        size_t obs_sd_d_0_max__ = n_r;
        obs_sd.reserve(obs_sd_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < obs_sd_d_0_max__; ++d_0__) {
            obs_sd.push_back(in__.scalar_lb_constrain(0));
        }
        size_t obs_sd_k_0_max__ = n_r;
        for (size_t k_0__ = 0; k_0__ < obs_sd_k_0_max__; ++k_0__) {
            vars__.push_back(obs_sd[k_0__]);
        }
        std::vector<double> u;
        size_t u_d_0_max__ = n_u;
        u.reserve(u_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < u_d_0_max__; ++d_0__) {
            u.push_back(in__.scalar_constrain());
        }
        size_t u_k_0_max__ = n_u;
        for (size_t k_0__ = 0; k_0__ < u_k_0_max__; ++k_0__) {
            vars__.push_back(u[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 39;
            validate_non_negative_index("sigma_rw", "(n_spp * n_spp)", (n_spp * n_spp));
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_rw((n_spp * n_spp));
            stan::math::initialize(sigma_rw, DUMMY_VAR__);
            stan::math::fill(sigma_rw, DUMMY_VAR__);
            current_statement_begin__ = 40;
            validate_non_negative_index("resid_process_mat", "n_spp", n_spp);
            validate_non_negative_index("resid_process_mat", "n_process", n_process);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> resid_process_mat(n_spp, n_process);
            stan::math::initialize(resid_process_mat, DUMMY_VAR__);
            stan::math::fill(resid_process_mat, DUMMY_VAR__);
            current_statement_begin__ = 41;
            validate_non_negative_index("obs_mat", "n_spp", n_spp);
            validate_non_negative_index("obs_mat", "n_site", n_site);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> obs_mat(n_spp, n_site);
            stan::math::initialize(obs_mat, DUMMY_VAR__);
            stan::math::fill(obs_mat, DUMMY_VAR__);
            current_statement_begin__ = 42;
            validate_non_negative_index("vecB", "(n_spp * n_spp)", (n_spp * n_spp));
            validate_non_negative_index("vecB", "n_year", n_year);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > vecB(n_year, Eigen::Matrix<double, Eigen::Dynamic, 1>((n_spp * n_spp)));
            stan::math::initialize(vecB, DUMMY_VAR__);
            stan::math::fill(vecB, DUMMY_VAR__);
            current_statement_begin__ = 43;
            validate_non_negative_index("u_mat", "n_spp", n_spp);
            validate_non_negative_index("u_mat", "n_process", n_process);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> u_mat(n_spp, n_process);
            stan::math::initialize(u_mat, DUMMY_VAR__);
            stan::math::fill(u_mat, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("B", "n_spp", n_spp);
            validate_non_negative_index("B", "n_spp", n_spp);
            validate_non_negative_index("B", "(n_year - 1)", (n_year - 1));
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > B((n_year - 1), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_spp, n_spp));
            stan::math::initialize(B, DUMMY_VAR__);
            stan::math::fill(B, DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("pred", "n_year", n_year);
            validate_non_negative_index("pred", "n_spp", n_spp);
            validate_non_negative_index("pred", "n_process", n_process);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > pred(n_process, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_year, n_spp));
            stan::math::initialize(pred, DUMMY_VAR__);
            stan::math::fill(pred, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 47;
            for (int i = 1; i <= (n_spp * n_spp); ++i) {
                current_statement_begin__ = 48;
                stan::model::assign(sigma_rw, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(sigma_rw_pars, get_base1(b_diag, i, "b_diag", 1), "sigma_rw_pars", 1), 
                            "assigning variable sigma_rw");
            }
            current_statement_begin__ = 50;
            for (int i = 1; i <= n_spp; ++i) {
                current_statement_begin__ = 51;
                for (int j = 1; j <= n_process; ++j) {
                    current_statement_begin__ = 52;
                    stan::model::assign(resid_process_mat, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(resid_process_sd, get_base1(get_base1(shared_q, i, "shared_q", 1), j, "shared_q", 2), "resid_process_sd", 1), 
                                "assigning variable resid_process_mat");
                    current_statement_begin__ = 53;
                    stan::model::assign(u_mat, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(u, get_base1(get_base1(shared_u, i, "shared_u", 1), j, "shared_u", 2), "u", 1), 
                                "assigning variable u_mat");
                }
                current_statement_begin__ = 55;
                for (int j = 1; j <= n_site; ++j) {
                    current_statement_begin__ = 56;
                    stan::model::assign(obs_mat, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(obs_sd, get_base1(get_base1(shared_r, i, "shared_r", 1), j, "shared_r", 2), "obs_sd", 1), 
                                "assigning variable obs_mat");
                }
            }
            current_statement_begin__ = 60;
            for (int s = 1; s <= n_process; ++s) {
                current_statement_begin__ = 61;
                stan::model::assign(pred, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), 
                            stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "x"), 
                            "assigning variable pred");
            }
            current_statement_begin__ = 63;
            for (int i = 1; i <= (n_spp * n_spp); ++i) {
                current_statement_begin__ = 64;
                stan::model::assign(vecB, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            get_base1(get_base1(vecBdev, 1, "vecBdev", 1), i, "vecBdev", 2), 
                            "assigning variable vecB");
            }
            current_statement_begin__ = 66;
            for (int t = 2; t <= n_year; ++t) {
                current_statement_begin__ = 70;
                for (int i = 1; i <= (n_spp * n_spp); ++i) {
                    current_statement_begin__ = 72;
                    stan::model::assign(B, 
                                stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_uni(get_base1(row_indices, i, "row_indices", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indices, i, "col_indices", 1)), stan::model::nil_index_list()))), 
                                (((get_base1(b_limits, get_base1(b_indices, i, "b_indices", 1), 2, "b_limits", 1) - get_base1(b_limits, get_base1(b_indices, i, "b_indices", 1), 1, "b_limits", 1)) * get_base1(get_base1(vecB, (t - 1), "vecB", 1), i, "vecB", 2)) + get_base1(b_limits, get_base1(b_indices, i, "b_indices", 1), 1, "b_limits", 1)), 
                                "assigning variable B");
                    current_statement_begin__ = 74;
                    stan::model::assign(vecB, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                (get_base1(get_base1(vecB, (t - 1), "vecB", 1), i, "vecB", 2) + (fit_dynamicB * get_base1(get_base1(vecBdev, (t - 1), "vecBdev", 1), i, "vecBdev", 2))), 
                                "assigning variable vecB");
                }
                current_statement_begin__ = 83;
                for (int s = 1; s <= n_process; ++s) {
                    current_statement_begin__ = 84;
                    if (as_bool(logical_eq(est_trend, 0))) {
                        current_statement_begin__ = 85;
                        if (as_bool(logical_eq(demean, 0))) {
                            current_statement_begin__ = 85;
                            stan::model::assign(pred, 
                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), 
                                        multiply(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "x"), stan::model::rvalue(B, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "B")), 
                                        "assigning variable pred");
                        }
                        current_statement_begin__ = 86;
                        if (as_bool(logical_eq(demean, 1))) {
                            current_statement_begin__ = 86;
                            stan::model::assign(pred, 
                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), 
                                        multiply(subtract(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "x"), transpose(stan::model::rvalue(u_mat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "u_mat"))), stan::model::rvalue(B, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "B")), 
                                        "assigning variable pred");
                        }
                    }
                    current_statement_begin__ = 88;
                    if (as_bool(logical_eq(est_trend, 1))) {
                        current_statement_begin__ = 89;
                        if (as_bool(logical_eq(demean, 0))) {
                            current_statement_begin__ = 89;
                            stan::model::assign(pred, 
                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), 
                                        add(multiply(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "x"), stan::model::rvalue(B, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "B")), transpose(stan::model::rvalue(u_mat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "u_mat"))), 
                                        "assigning variable pred");
                        }
                        current_statement_begin__ = 90;
                        if (as_bool(logical_eq(demean, 1))) {
                            current_statement_begin__ = 90;
                            stan::model::assign(pred, 
                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), 
                                        add(multiply(subtract(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "x"), transpose(stan::model::rvalue(u_mat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "u_mat"))), stan::model::rvalue(B, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "B")), transpose(stan::model::rvalue(u_mat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "u_mat"))), 
                                        "assigning variable pred");
                        }
                    }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 39;
            check_greater_or_equal(function__, "sigma_rw", sigma_rw, 0);
            current_statement_begin__ = 40;
            check_greater_or_equal(function__, "resid_process_mat", resid_process_mat, 0);
            current_statement_begin__ = 41;
            check_greater_or_equal(function__, "obs_mat", obs_mat, 0);
            current_statement_begin__ = 42;
            size_t vecB_i_0_max__ = n_year;
            for (size_t i_0__ = 0; i_0__ < vecB_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "vecB[i_0__]", vecB[i_0__], -(20));
                check_less_or_equal(function__, "vecB[i_0__]", vecB[i_0__], 20);
            }
            // write transformed parameters
            if (include_tparams__) {
                size_t sigma_rw_j_1_max__ = (n_spp * n_spp);
                for (size_t j_1__ = 0; j_1__ < sigma_rw_j_1_max__; ++j_1__) {
                    vars__.push_back(sigma_rw(j_1__));
                }
                size_t resid_process_mat_j_2_max__ = n_process;
                size_t resid_process_mat_j_1_max__ = n_spp;
                for (size_t j_2__ = 0; j_2__ < resid_process_mat_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < resid_process_mat_j_1_max__; ++j_1__) {
                        vars__.push_back(resid_process_mat(j_1__, j_2__));
                    }
                }
                size_t obs_mat_j_2_max__ = n_site;
                size_t obs_mat_j_1_max__ = n_spp;
                for (size_t j_2__ = 0; j_2__ < obs_mat_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < obs_mat_j_1_max__; ++j_1__) {
                        vars__.push_back(obs_mat(j_1__, j_2__));
                    }
                }
                size_t vecB_j_1_max__ = (n_spp * n_spp);
                size_t vecB_k_0_max__ = n_year;
                for (size_t j_1__ = 0; j_1__ < vecB_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < vecB_k_0_max__; ++k_0__) {
                        vars__.push_back(vecB[k_0__](j_1__));
                    }
                }
                size_t u_mat_j_2_max__ = n_process;
                size_t u_mat_j_1_max__ = n_spp;
                for (size_t j_2__ = 0; j_2__ < u_mat_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < u_mat_j_1_max__; ++j_1__) {
                        vars__.push_back(u_mat(j_1__, j_2__));
                    }
                }
                size_t B_j_2_max__ = n_spp;
                size_t B_j_1_max__ = n_spp;
                size_t B_k_0_max__ = (n_year - 1);
                for (size_t j_2__ = 0; j_2__ < B_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                        for (size_t k_0__ = 0; k_0__ < B_k_0_max__; ++k_0__) {
                            vars__.push_back(B[k_0__](j_1__, j_2__));
                        }
                    }
                }
                size_t pred_j_2_max__ = n_spp;
                size_t pred_j_1_max__ = n_year;
                size_t pred_k_0_max__ = n_process;
                for (size_t j_2__ = 0; j_2__ < pred_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                        for (size_t k_0__ = 0; k_0__ < pred_k_0_max__; ++k_0__) {
                            vars__.push_back(pred[k_0__](j_1__, j_2__));
                        }
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 148;
            validate_non_negative_index("log_lik", "n_pos", n_pos);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(n_pos);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 150;
            if (as_bool(logical_eq(family, 1))) {
                current_statement_begin__ = 150;
                for (int n = 1; n <= n_pos; ++n) {
                    current_statement_begin__ = 150;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_log(get_base1(y, n, "y", 1), get_base1(get_base1(x, get_base1(site_indices_pos, n, "site_indices_pos", 1), "x", 1), get_base1(year_indices_pos, n, "year_indices_pos", 1), get_base1(spp_indices_pos, n, "spp_indices_pos", 1), "x", 2), get_base1(obs_mat, get_base1(spp_indices_pos, n, "spp_indices_pos", 1), get_base1(site_indices_pos, n, "site_indices_pos", 1), "obs_mat", 1)), 
                                "assigning variable log_lik");
                }
            }
            current_statement_begin__ = 151;
            if (as_bool(logical_eq(family, 2))) {
                current_statement_begin__ = 151;
                for (int n = 1; n <= n_pos; ++n) {
                    current_statement_begin__ = 151;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                bernoulli_log(get_base1(y_int, n, "y_int", 1), inv_logit(get_base1(get_base1(x, get_base1(site_indices_pos, n, "site_indices_pos", 1), "x", 1), get_base1(year_indices_pos, n, "year_indices_pos", 1), get_base1(spp_indices_pos, n, "spp_indices_pos", 1), "x", 2))), 
                                "assigning variable log_lik");
                }
            }
            current_statement_begin__ = 152;
            if (as_bool(logical_eq(family, 3))) {
                current_statement_begin__ = 152;
                for (int n = 1; n <= n_pos; ++n) {
                    current_statement_begin__ = 152;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                poisson_log(get_base1(y_int, n, "y_int", 1), stan::math::exp(get_base1(get_base1(x, get_base1(site_indices_pos, n, "site_indices_pos", 1), "x", 1), get_base1(year_indices_pos, n, "year_indices_pos", 1), get_base1(spp_indices_pos, n, "spp_indices_pos", 1), "x", 2))), 
                                "assigning variable log_lik");
                }
            }
            current_statement_begin__ = 153;
            if (as_bool(logical_eq(family, 4))) {
                current_statement_begin__ = 153;
                for (int n = 1; n <= n_pos; ++n) {
                    current_statement_begin__ = 153;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                gamma_log(get_base1(y, n, "y", 1), get_base1(obs_mat, get_base1(spp_indices_pos, n, "spp_indices_pos", 1), get_base1(site_indices_pos, n, "site_indices_pos", 1), "obs_mat", 1), (get_base1(obs_mat, get_base1(spp_indices_pos, n, "spp_indices_pos", 1), get_base1(site_indices_pos, n, "site_indices_pos", 1), "obs_mat", 1) / stan::math::exp(get_base1(get_base1(x, get_base1(site_indices_pos, n, "site_indices_pos", 1), "x", 1), get_base1(year_indices_pos, n, "year_indices_pos", 1), get_base1(spp_indices_pos, n, "spp_indices_pos", 1), "x", 2)))), 
                                "assigning variable log_lik");
                }
            }
            current_statement_begin__ = 154;
            if (as_bool(logical_eq(family, 5))) {
                current_statement_begin__ = 154;
                for (int n = 1; n <= n_pos; ++n) {
                    current_statement_begin__ = 154;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                lognormal_log(get_base1(y, n, "y", 1), get_base1(get_base1(x, get_base1(site_indices_pos, n, "site_indices_pos", 1), "x", 1), get_base1(year_indices_pos, n, "year_indices_pos", 1), get_base1(spp_indices_pos, n, "spp_indices_pos", 1), "x", 2), get_base1(obs_mat, get_base1(spp_indices_pos, n, "spp_indices_pos", 1), get_base1(site_indices_pos, n, "site_indices_pos", 1), "obs_mat", 1)), 
                                "assigning variable log_lik");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 148;
            size_t log_lik_j_1_max__ = n_pos;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_tvvarss";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t vecBdev_j_1_max__ = (n_spp * n_spp);
        size_t vecBdev_k_0_max__ = n_year;
        for (size_t j_1__ = 0; j_1__ < vecBdev_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < vecBdev_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "vecBdev" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_rw_pars_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < sigma_rw_pars_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_rw_pars" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t x_j_2_max__ = n_spp;
        size_t x_j_1_max__ = n_year;
        size_t x_k_0_max__ = n_process;
        for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t resid_process_sd_k_0_max__ = n_q;
        for (size_t k_0__ = 0; k_0__ < resid_process_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "resid_process_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t obs_sd_k_0_max__ = n_r;
        for (size_t k_0__ = 0; k_0__ < obs_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "obs_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t u_k_0_max__ = n_u;
        for (size_t k_0__ = 0; k_0__ < u_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "u" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t sigma_rw_j_1_max__ = (n_spp * n_spp);
            for (size_t j_1__ = 0; j_1__ < sigma_rw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_rw" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t resid_process_mat_j_2_max__ = n_process;
            size_t resid_process_mat_j_1_max__ = n_spp;
            for (size_t j_2__ = 0; j_2__ < resid_process_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < resid_process_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "resid_process_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t obs_mat_j_2_max__ = n_site;
            size_t obs_mat_j_1_max__ = n_spp;
            for (size_t j_2__ = 0; j_2__ < obs_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < obs_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "obs_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t vecB_j_1_max__ = (n_spp * n_spp);
            size_t vecB_k_0_max__ = n_year;
            for (size_t j_1__ = 0; j_1__ < vecB_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < vecB_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "vecB" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t u_mat_j_2_max__ = n_process;
            size_t u_mat_j_1_max__ = n_spp;
            for (size_t j_2__ = 0; j_2__ < u_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < u_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "u_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t B_j_2_max__ = n_spp;
            size_t B_j_1_max__ = n_spp;
            size_t B_k_0_max__ = (n_year - 1);
            for (size_t j_2__ = 0; j_2__ < B_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < B_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "B" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t pred_j_2_max__ = n_spp;
            size_t pred_j_1_max__ = n_year;
            size_t pred_k_0_max__ = n_process;
            for (size_t j_2__ = 0; j_2__ < pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < pred_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = n_pos;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t vecBdev_j_1_max__ = (n_spp * n_spp);
        size_t vecBdev_k_0_max__ = n_year;
        for (size_t j_1__ = 0; j_1__ < vecBdev_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < vecBdev_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "vecBdev" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_rw_pars_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < sigma_rw_pars_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_rw_pars" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t x_j_2_max__ = n_spp;
        size_t x_j_1_max__ = n_year;
        size_t x_k_0_max__ = n_process;
        for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t resid_process_sd_k_0_max__ = n_q;
        for (size_t k_0__ = 0; k_0__ < resid_process_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "resid_process_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t obs_sd_k_0_max__ = n_r;
        for (size_t k_0__ = 0; k_0__ < obs_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "obs_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t u_k_0_max__ = n_u;
        for (size_t k_0__ = 0; k_0__ < u_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "u" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t sigma_rw_j_1_max__ = (n_spp * n_spp);
            for (size_t j_1__ = 0; j_1__ < sigma_rw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_rw" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t resid_process_mat_j_2_max__ = n_process;
            size_t resid_process_mat_j_1_max__ = n_spp;
            for (size_t j_2__ = 0; j_2__ < resid_process_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < resid_process_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "resid_process_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t obs_mat_j_2_max__ = n_site;
            size_t obs_mat_j_1_max__ = n_spp;
            for (size_t j_2__ = 0; j_2__ < obs_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < obs_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "obs_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t vecB_j_1_max__ = (n_spp * n_spp);
            size_t vecB_k_0_max__ = n_year;
            for (size_t j_1__ = 0; j_1__ < vecB_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < vecB_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "vecB" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t u_mat_j_2_max__ = n_process;
            size_t u_mat_j_1_max__ = n_spp;
            for (size_t j_2__ = 0; j_2__ < u_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < u_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "u_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t B_j_2_max__ = n_spp;
            size_t B_j_1_max__ = n_spp;
            size_t B_k_0_max__ = (n_year - 1);
            for (size_t j_2__ = 0; j_2__ < B_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < B_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "B" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t pred_j_2_max__ = n_spp;
            size_t pred_j_1_max__ = n_year;
            size_t pred_k_0_max__ = n_process;
            for (size_t j_2__ = 0; j_2__ < pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < pred_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = n_pos;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_tvvarss_namespace::model_tvvarss stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
